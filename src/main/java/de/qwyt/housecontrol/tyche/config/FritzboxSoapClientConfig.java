package de.qwyt.housecontrol.tyche.config;


import org.apache.cxf.Bus;
import org.apache.cxf.bus.spring.SpringBus;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.oxm.jaxb.Jaxb2Marshaller;
import org.springframework.ws.client.core.WebServiceTemplate;
import org.springframework.ws.client.support.interceptor.ClientInterceptor;


import de.qwyt.housecontrol.tyche.service.fritzbox.Hosts1Service;
import de.qwyt.housecontrol.tyche.service.webservice.FritzboxAuthInterceptor;
import de.qwyt.housecontrol.tyche.service.fritzbox.FritzboxTr064Interceptor;

@Configuration
public class FritzboxSoapClientConfig {
	
	@Value("${fritzbox.username}")
	private String username;
	
	@Value("${fritzbox.pw}")
	private String pw;
	
	@Value("${fritzbox.tr064.endpoints.hosts}")
	private String endpointHosts;
	
	@Bean
	public Hosts1Service hostsService() {
		JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();
		factory.setServiceClass(Hosts1Service.class);
		factory.setAddress(endpointHosts);
		
		// Proxy for interceptor
		Hosts1Service service = (Hosts1Service) factory.create();
		Client client = ClientProxy.getClient(service);
		client.getOutInterceptors().add(new FritzboxTr064Interceptor());
		client.getOutInterceptors().add(new LoggingOutInterceptor());
		client.getInInterceptors().add(new LoggingInInterceptor());
		
		return service;
	}
	
	
	@Bean
	public Jaxb2Marshaller tr064Marshaller() {
		// converter between java object and xml 
		Jaxb2Marshaller marshaller = new Jaxb2Marshaller();
		// package with JAXB class
		// generated by maven plugin
		marshaller.setContextPath("fritzbox.ws.tr064");
		
		return marshaller;
	}
	
	/*
	@Bean
	public HttpComponentsMessageSender httpComponentMessageSender() {
		String absoluteTruststorePath = "";
		
		try {
			absoluteTruststorePath = truststore.getFile().getAbsolutePath();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// new SSL context with truststore
		try {
			SSLContext sslContext = SSLContextBuilder.create().loadTrustMaterial(new File(absoluteTruststorePath), truststorePw.toCharArray()).build();
			SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);
			CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();
			HttpComponentsMessageSender messageSender = new HttpComponentsMessageSender();
			messageSender.setHttpClient(httpClient);
			
			return messageSender;
		} catch (KeyManagementException | NoSuchAlgorithmException | KeyStoreException | CertificateException
				| IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	}
	*/
	
	
	@Bean
	public FritzboxAuthInterceptor fritzboxAuthInterceptor() {
		return new FritzboxAuthInterceptor(username, pw);
	}
	
	@Bean
	//public WebServiceTemplate webServiceTemplate(Jaxb2Marshaller marshaller, HttpComponentsMessageSender messageSender, FritzboxAuthInterceptor authInterceptor) {
	public WebServiceTemplate webServiceTemplate(Jaxb2Marshaller marshaller, FritzboxAuthInterceptor authInterceptor) {
		WebServiceTemplate webServiceTemplate = new WebServiceTemplate();
		webServiceTemplate.setMarshaller(marshaller);
		webServiceTemplate.setUnmarshaller(marshaller);
		//webServiceTemplate.setDefaultUri(fritzTr064Url);
		//new PayloadLoggingInterceptor()
		webServiceTemplate.setInterceptors(new ClientInterceptor[] { authInterceptor });
		//webServiceTemplate.setInterceptors(new ClientInterceptor[] { new PayloadLoggingInterceptor() });
		//webServiceTemplate.setMessageSender(messageSender);
		return webServiceTemplate;
	}
}
